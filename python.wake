##########################################################
#
# Python-Wake
#
# Supports Python virtual environments through the "pipenv" mechanism,
#   and provides a simplified "runPython" function to invoke a python module.
#
# To support distinct environments, the .venv directory is located in the
#   same directory as Pipfile. It is installed automatically by wake,
#   but the installation can be performed ahead of time by other tools (eg wit).
#
# Note we only look at "Pipfile.lock".  This routine does NOT update or create "Pipfile.lock".
#
############################################################


#################################################################
# Given a plan, Run a python module in that environment.
# Python always adds the CWD to the path.
#################################################################
# TODO - Don't include CWD in sys.path. Under Wake, CWD is usually the workspace.
global def runPython module args plan =
  runCommand ("python3", "-m", module, args)  plan



##########################################################
# Add a pip virtual environment to the plan
##########################################################
global def addPythonEnv pipDir plan =

    # Install the virtual environment if not already done
    def installed = installPipEnv pipDir

    # Add the binary directory to PATH.
    plan
    | addPlanPath  "PYTHONPATH"  (pipDir | debug "Adding to PYTHONPATH")
    | addPlanPath  "PYTHONPATH"  "{workspace}/{pipDir}/.venv"
    | addPlanPath  "PATH" "{workspace}/{pipDir}/.venv/bin"
    | setPlanVar "PYTHONDONTWRITEBYTECODE"  "1"   # Avoid creating pycache
    | editPlanVisible (installed ++ _)



##############################################################################
# Install the pipenv environment associated with Pipfile.lock, returning .venv directory on success.
#   The .venv will reside in the same directory as the Pipfile.lock.
#   We do NOT look at Pipfile, nor do we update Pipfile.lock. We simply create a reproducible set of packages.
#
# We assume the Pipfile is at the top of a Python module, thus we add the directory to the PYTHONPATH.
################################################################################
global def installPipEnv pipDir =

   # Step 1 - Use pip to install pipenv in .venv/bin
   #  TODO: Not sure why pipDir must be added to visibles (with fuse).
   #  TODO: fuse fails with permission errors when following symbolic links to system directory.
   def pipOutputs =
      manualEnv
      | setPlanVisible (source pipDir, source "{pipDir}/Pipfile.lock", Nil)
      | setPlanResources ("python/python/3.7.1", Nil)
      | setPlanDirectory pipDir
      | setPlanOutputs ("{pipDir}/.venv", Nil) # Only for manual workaround - we need some output
      | runCommand("pip3", "install", "--target=.venv", "pipenv", Nil)
      | getJobOutputs

   # Step 2 - use pipenv and Pipfile.lock to install everything else in .venv
   #    We do NOT update Pipfile.lock, nor do we even look at Pipfile.
   #    For manual workaround, we need some output thingy ... but what?
   def pipenvOutputs =
     manualEnv
     | setPlanVisible pipOutputs
     | setPlanResources ("python/python/3.7.1", Nil)
     | setPlanVar "PIPENV_VENV_IN_PROJECT" "YES"
     | setPlanDirectory pipDir
     | runCommand (".venv/bin/pipenv",  "sync", "--dev", Nil)
     | getJobOutputs

   # Our return value is all of the files installed. (potential dependencies to downstream jobs)
   pipenvOutputs ++ pipOutputs


