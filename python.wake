############################################################################
#
# Python-Wake
#
# Supports multiple Python virtual environments through the "pipenv" mechanism.
#   Each environment corresponds to a directory containing a Pipfile.
#
# To use the python virtual environment, add it to the command's plan.
# For example,
#     makePlan  (pythonCommand  "myscript.py" (arg1, ar2, Nil))  visibles
#     | addPythonEnv  "directory containing Pipfile"
#     | runJob
#
# If you have a specific python module to run, you can create the plan like this:
#     makePlan (pythonModule my.module (arglist))  sources
#
# If you wish to download python modules ahead of time,
#      publish preinstall = (pythonInstaller "directory-containing-Pipfile"), Nil
# and the "wake preinstall Unit" call will then download the python modules.
#
#############################################################################



######################################################
# Add a Python virtual environment to a plan.
#   Currently only supports pipenv, but this is where would examine the directory
#   to see if other env managers are being used.
##########################################################
global def addPythonEnv pipDir plan =

  # Install the virtual environment if not already done
  def installed = installPipenvEnv pipDir
  def venv = "build/{pipDir}/.venv"

  # Add the binary directory to PATH.
  plan
  | editPlanVisible (installed ++ _)
  | addPlanRelativePath  "PYTHONPATH"  venv
  | addPlanRelativePath  "PATH" "{venv}/bin"


###########################################################################
# Create an installer function which, when invoked, installs python virtual env.
#    Note the extra "Unit" in the argument list - it returns a function
#    rather than doing the work immediately.
##########################################################################
global def pythonInstaller pipdir Unit =
  installPipenvEnv pipdir | verifyFiles



#######################################################################################
# Commands for running Python. We suppress byte code since it causes concurrency problems with Wake.
######################################################################################
global def pythonCommand script args = ("python3.7", "-B", script, args)
global def pythonModule module args = ("python3.7", "-B", "-m", module, args)



##############################################################################
# Install the python environment associated with Pipfile.lock.
#
# WARNING: When installing to the .venv/bin directory,
#   pipenv creates scripts which embed the "realpath"
#   of the Python binary. Under Wake, these paths contain
#   explicit references to the Fuse directories.
#
#   So, pipenv creates invalid paths like the following:
#       /workspace/.build/91/.venv/bin/python3.7
#   when it should create the following path:
#       /workspace/.venv/bin/python3.7
#
#   There will be an upcoming fix for this problem, but for now,
#   do not use scripts installed under pipenv's bin directory.
#
#################################################################################
target installPipenvEnv pipDir =

  # Where we will install the virtual environment.
  def venv = "build/{pipDir}/.venv"
  def pipFile = installIn "build" (source "{pipDir}/Pipfile")
  def lock = installIn "build" (source "{pipDir}/Pipfile.lock")
  def installPipenvScript = source "{here}/install-python-pipenv"

  # Build up the command "install-python-pipe  <pipfile>  <lockfile>  <venv>"
  def args =
    installPipenvScript.getPathName,
    pipFile.getPathName,
    lock.getPathName,
    venv,
    Nil

  def visible = installPipenvScript, pipFile, lock, Nil

  # Create a plan to run the script and create a virtual environment.
  makePlan args visible
  | setPlanResources ("python/python/3.7.1", Nil)

  # Finally, run the plan and return tbe list of files installed in the venv.
  | runJob
  | getJobOutputs
